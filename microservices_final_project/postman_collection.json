{
	"info": {
		"_postman_id": "b3768092-0863-433a-b133-f1a91e005778",
		"name": "Scooter rent",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sing-up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {",
							"  pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userName\", pm.variables.replaceIn(\"User-{{$randomFirstName}}\"));",
							"console.log(\"Username: \" + pm.collectionVariables.get(\"userName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-up",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Session token in the response\", () => {",
							"  pm.expect(jsonData).to.have.property(\"token\");",
							"});",
							"",
							"pm.collectionVariables.set(\"sessionToken\", jsonData.token);",
							"console.log(\"Session token: \" + jsonData.token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Username: \" + pm.collectionVariables.get(\"userName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-in",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"0.00\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add funds - 150.00",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Balance is 150.00\", () => {",
							"  pm.expect(jsonData.balance).to.be.equal(\"150.00\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"150.00\",\n    \"idempotency_key\": \"{{$guid}}\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check notifications\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(1);",
							"  pm.expect(jsonData[0].event).to.equal(\"Funds transferred - 150.00\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/notifications",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "List available scooters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check available scooters\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(10);",
							"});",
							"",
							"",
							"for (let i = 0; i < jsonData.length; i++) {",
							"    if (!jsonData[i][\"id\"].startsWith(\"test-\")) {",
							"        pm.collectionVariables.set(\"scooterId\", jsonData[i][\"id\"]);",
							"        console.log(\"Scooter ID: \" + jsonData[i][\"id\"]);",
							"        break;",
							"    }",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/scooters",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start scooter rent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check scooter rent is in PENDING status\", () => {",
							"  pm.expect(jsonData.scooter_id).to.equal(pm.collectionVariables.get(\"scooterId\"));",
							"  pm.expect(jsonData.status).to.equal(\"PENDING\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scooter_id\": \"{{scooterId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/scooters/rent",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters",
						"rent"
					]
				}
			},
			"response": []
		},
		{
			"name": "List available scooters - one scooter is in rent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check available scooters\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(9);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [5000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/scooters",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications - start rent notification added",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check notifications\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(2);",
							"  pm.expect(jsonData[0].event).to.equal(\"Scooter rent started - \" + pm.collectionVariables.get(\"scooterId\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/notifications",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Finish scooter rent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check scooter rent has finished successfully\", () => {",
							"  pm.expect(jsonData.scooter_id).to.equal(pm.collectionVariables.get(\"scooterId\"));",
							"  pm.expect(jsonData.status).to.equal(\"FINISHED\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/scooters/rent",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters",
						"rent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"50.00\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{sessionToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications - finish rent notification added",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check notifications\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(3);",
							"  pm.expect(jsonData[0].event).to.equal(\"Scooter rent finished - \" + pm.collectionVariables.get(\"scooterId\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/notifications",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start scooter rent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check scooter rent is in PENDING status\", () => {",
							"  pm.expect(jsonData.scooter_id).to.equal(pm.collectionVariables.get(\"scooterId\"));",
							"  pm.expect(jsonData.status).to.equal(\"PENDING\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scooter_id\": \"{{scooterId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/scooters/rent",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters",
						"rent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check rent - canceled due to insufficient funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check scooter rent is in CANCELED status\", () => {",
							"  pm.expect(jsonData.scooter_id).to.equal(pm.collectionVariables.get(\"scooterId\"));",
							"  pm.expect(jsonData.status).to.equal(\"CANCELED\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [5000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/scooters/rent",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters",
						"rent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"50.00\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add funds - 50.00",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Balance is 100.00\", () => {",
							"  pm.expect(jsonData.balance).to.be.equal(\"100.00\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"50.00\",\n    \"idempotency_key\": \"{{$guid}}\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Start scooter rent - notification fails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check scooter rent is in PENDING status\", () => {",
							"  pm.expect(jsonData.scooter_id).to.equal(\"test-notification-service-fails\");",
							"  pm.expect(jsonData.status).to.equal(\"PENDING\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"scooter_id\": \"test-notification-service-fails\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/scooters/rent",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters",
						"rent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check rent - canceled due to notification failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check scooter rent is in CANCELED status\", () => {",
							"  pm.expect(jsonData.scooter_id).to.equal(\"test-notification-service-fails\");",
							"  pm.expect(jsonData.status).to.equal(\"CANCELED\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){}, [5000]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/scooters/rent",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"scooters",
						"rent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"100.00\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{sessionToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var jsonReq = pm.request.body ? pm.request.body.raw : '...';",
					"var jsonRes = pm.response.text();",
					"console.log(\"Request body is: \")",
					"console.log(jsonReq)",
					"console.log(\"Response body is: \")",
					"console.log(jsonRes)"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "sessionToken",
			"value": ""
		},
		{
			"key": "scooterId",
			"value": ""
		}
	]
}