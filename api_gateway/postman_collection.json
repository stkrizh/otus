{
	"info": {
		"_postman_id": "6f75f5e5-e0df-49b9-a927-a6ceecc43e3e",
		"name": "API gateway",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User One sign-up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {",
							"  pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userOneName\", pm.variables.replaceIn(\"User-{{$randomFirstName}}\"));",
							"console.log(\"User One name: \" + pm.collectionVariables.get(\"userOneName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userOneName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-up",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get profile without auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 (Unauthorized)\", () => {",
							"  pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/profile",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update profile without auth token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 (Unauthorized)\", () => {",
							"  pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Fn\",\n    \"last_name\": \"Ln\",\n    \"email\": \"email@example.org\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profile",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "User One sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Session token in the response\", () => {",
							"  pm.expect(jsonData).to.have.property(\"token\");",
							"});",
							"",
							"pm.collectionVariables.set(\"userOneToken\", jsonData.token);",
							"console.log(\"User One token: \" + jsonData.token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"User One name: \" + pm.collectionVariables.get(\"userOneName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userOneName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-in",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "User One update profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Profile has been updated\", () => {",
							"  pm.expect(jsonData.first_name).to.be.equal(pm.collectionVariables.get(\"userOneFirstName\"));",
							"  pm.expect(jsonData.last_name).to.be.equal(pm.collectionVariables.get(\"userOneLastName\"));",
							"  pm.expect(jsonData.email).to.be.equal(pm.collectionVariables.get(\"userOneEmail\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(",
							"    \"userOneFirstName\", ",
							"    pm.variables.replaceIn(\"{{$randomFirstName}}\")",
							");",
							"pm.collectionVariables.set(",
							"    \"userOneLastName\", ",
							"    pm.variables.replaceIn(\"{{$randomLastName}}\")",
							");",
							"pm.collectionVariables.set(",
							"    \"userOneEmail\", ",
							"    pm.variables.replaceIn(\"{{$randomEmail}}\")",
							");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{userOneToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"{{userOneFirstName}}\",\n    \"last_name\": \"{{userOneLastName}}\",\n    \"email\": \"{{userOneEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/profile",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Two sign-up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {",
							"  pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userTwoName\", pm.variables.replaceIn(\"User-{{$randomFirstName}}\"));",
							"console.log(\"User Two name: \" + pm.collectionVariables.get(\"userTwoName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userTwoName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-up",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Two sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Session token in the response\", () => {",
							"  pm.expect(jsonData).to.have.property(\"token\");",
							"});",
							"",
							"pm.collectionVariables.set(\"userTwoToken\", jsonData.token);",
							"console.log(\"User Two token: \" + jsonData.token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"User Two name: \" + pm.collectionVariables.get(\"userTwoName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userTwoName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-in",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Two get profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check user Two profile\", () => {",
							"  pm.expect(jsonData.first_name).to.not.equal(pm.collectionVariables.get(\"userOneFirstName\"));",
							"  pm.expect(jsonData.last_name).to.not.equal(pm.collectionVariables.get(\"userOneLastName\"));",
							"  pm.expect(jsonData.email).to.not.equal(pm.collectionVariables.get(\"userOneEmail\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{userTwoToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/profile",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var jsonReq = pm.request.body ? pm.request.body.raw : '...';",
					"var jsonRes = pm.response.text();",
					"console.log(\"Request body is: \")",
					"console.log(jsonReq)",
					"console.log(\"Response body is: \")",
					"console.log(jsonRes)"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "userOneName",
			"value": ""
		},
		{
			"key": "userOneToken",
			"value": ""
		},
		{
			"key": "userOneEmail",
			"value": ""
		},
		{
			"key": "userOneFirstName",
			"value": ""
		},
		{
			"key": "userOneLastName",
			"value": ""
		},
		{
			"key": "userTwoName",
			"value": ""
		},
		{
			"key": "userTwoToken",
			"value": ""
		}
	]
}