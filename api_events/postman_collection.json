{
	"info": {
		"_postman_id": "eca31a6a-730a-4a77-b254-aac8e35475e7",
		"name": "API events",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sing-up",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {",
							"  pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userName\", pm.variables.replaceIn(\"User-{{$randomFirstName}}\"));",
							"console.log(\"Username: \" + pm.collectionVariables.get(\"userName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-up",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-up"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign-in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Session token in the response\", () => {",
							"  pm.expect(jsonData).to.have.property(\"token\");",
							"});",
							"",
							"pm.collectionVariables.set(\"sessionToken\", jsonData.token);",
							"console.log(\"Session token: \" + jsonData.token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Username: \" + pm.collectionVariables.get(\"userName\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{userName}}\",\n    \"password\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/auth/sign-in",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"sign-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"0.00\");",
							"  pm.expect(jsonData.version).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add funds (100.00) - valid version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Balance is 100.00\", () => {",
							"  pm.expect(jsonData.balance).to.be.equal(\"100.00\");",
							"  pm.expect(jsonData.version).to.be.equal(2);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{sessionToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"100.00\",\n    \"version\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add funds (100.00) - invalid version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412 (Precondition Failed)\", () => {",
							"  pm.response.to.have.status(412);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"100.00\",\n    \"version\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create payment (60.00) - valid version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Created)\", () => {",
							"  pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{sessionToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"60.00\",\n    \"version\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing/payments",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create payment (60.00) - invalid version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412 (Precondition Failed)\", () => {",
							"  pm.response.to.have.status(412);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"60.00\",\n    \"version\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing/payments",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"40.00\");",
							"  pm.expect(jsonData.version).to.equal(3);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{sessionToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check notifications\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(1);",
							"  pm.expect(jsonData[0].status).to.equal(\"succeeded\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/notifications",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create payment (60.00) - Insufficient funds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (bad request)\", () => {",
							"  pm.response.to.have.status(400);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Insufficient funds\", () => {",
							"  pm.expect(jsonData.error).to.equal(\"Insufficient funds.\");",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": \"60.00\",\n    \"version\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/billing/payments",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check account balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check account balance\", () => {",
							"  pm.expect(jsonData.balance).to.equal(\"40.00\");",
							"  pm.expect(jsonData.version).to.equal(3);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/billing",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"billing"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (OK)\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Check notifications\", () => {",
							"  pm.expect(jsonData).to.have.lengthOf(2);",
							"  pm.expect(jsonData[0].status).to.equal(\"canceled\");",
							"  pm.expect(jsonData[1].status).to.equal(\"succeeded\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{sessionToken}}"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}/notifications",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var jsonReq = pm.request.body ? pm.request.body.raw : '...';",
					"var jsonRes = pm.response.text();",
					"console.log(\"Request body is: \")",
					"console.log(jsonReq)",
					"console.log(\"Response body is: \")",
					"console.log(jsonRes)"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "sessionToken",
			"value": ""
		}
	]
}